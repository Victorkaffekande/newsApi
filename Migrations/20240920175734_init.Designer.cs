// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using newsApi;

#nullable disable

namespace newsApi.Migrations
{
    [DbContext(typeof(NewsContext))]
    [Migration("20240920175734_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.8");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a053fdb1-2e00-4cc9-996e-d5a7f5a244fa",
                            ConcurrencyStamp = "a053fdb1-2e00-4cc9-996e-d5a7f5a244fa",
                            Name = "Editor",
                            NormalizedName = "EDITOR"
                        },
                        new
                        {
                            Id = "40d75bab-de0d-480f-9077-f7c672b2b9df",
                            ConcurrencyStamp = "40d75bab-de0d-480f-9077-f7c672b2b9df",
                            Name = "Writer",
                            NormalizedName = "WRITER"
                        },
                        new
                        {
                            Id = "d1ec52b1-6223-42f6-85b7-8af22edb439c",
                            ConcurrencyStamp = "d1ec52b1-6223-42f6-85b7-8af22edb439c",
                            Name = "Subscriber",
                            NormalizedName = "SUBSCRIBER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "faa054ae-0eb7-44db-b34f-10bc5fc9fe09",
                            RoleId = "a053fdb1-2e00-4cc9-996e-d5a7f5a244fa"
                        },
                        new
                        {
                            UserId = "57a0fb60-4421-46d1-9931-9a54b3347d85",
                            RoleId = "40d75bab-de0d-480f-9077-f7c672b2b9df"
                        },
                        new
                        {
                            UserId = "1927b008-f316-4535-9328-958997f88a39",
                            RoleId = "40d75bab-de0d-480f-9077-f7c672b2b9df"
                        },
                        new
                        {
                            UserId = "e55487c1-37f7-4cad-88f1-13c089ceb2c6",
                            RoleId = "d1ec52b1-6223-42f6-85b7-8af22edb439c"
                        },
                        new
                        {
                            UserId = "69e928e3-4b49-42e2-a6bb-3724400398ab",
                            RoleId = "d1ec52b1-6223-42f6-85b7-8af22edb439c"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("newsApi.Enteties.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Articles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = "57a0fb60-4421-46d1-9931-9a54b3347d85",
                            Content = "very cool content",
                            CreatedAt = new DateTime(2024, 9, 20, 19, 57, 34, 16, DateTimeKind.Local).AddTicks(8194),
                            Title = "Very cool article"
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = "1927b008-f316-4535-9328-958997f88a39",
                            Content = "Lots of article 2 content here",
                            CreatedAt = new DateTime(2024, 9, 20, 19, 57, 34, 16, DateTimeKind.Local).AddTicks(8261),
                            Title = "Article 2"
                        });
                });

            modelBuilder.Entity("newsApi.Enteties.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ArticleId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("AuthorId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArticleId = 1,
                            AuthorId = "e55487c1-37f7-4cad-88f1-13c089ceb2c6",
                            Content = "I like this :)"
                        },
                        new
                        {
                            Id = 2,
                            ArticleId = 1,
                            AuthorId = "69e928e3-4b49-42e2-a6bb-3724400398ab",
                            Content = "This is fake news"
                        });
                });

            modelBuilder.Entity("newsApi.Enteties.NewsUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "faa054ae-0eb7-44db-b34f-10bc5fc9fe09",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "703f8e9f-c13f-47ff-8033-a1f3f22b83ee",
                            Email = "editor@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "EDITOR@MAIL.COM",
                            NormalizedUserName = "EDITOR@MAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPYNQhjryQ3YieJIUXmse5psMvnc31Eq/AufaB/ThLObQo8NNUTC6mX6XgrRpVvT/w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "df8a0aa7-6885-4e80-b146-1c40f0937e4c",
                            TwoFactorEnabled = false,
                            UserName = "editor@mail.com"
                        },
                        new
                        {
                            Id = "57a0fb60-4421-46d1-9931-9a54b3347d85",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6e3b4357-7217-4fdb-9b59-4304c0b671dc",
                            Email = "writer@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "WRITER@MAIL.COM",
                            NormalizedUserName = "WRITER@MAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFqeOoJiKEyMRSJ9qqrMpCtb/eFWIWb6C7U9xxzGydn81BHwmItOXFIg5jUMfEx+Jg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "56fb9af1-8f29-4520-a733-a55008878aea",
                            TwoFactorEnabled = false,
                            UserName = "writer@mail.com"
                        },
                        new
                        {
                            Id = "1927b008-f316-4535-9328-958997f88a39",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "421bc48d-9f74-4ec2-bb86-94b17404354f",
                            Email = "otherWriter@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "OTHERWRITER@MAIL.COM",
                            NormalizedUserName = "OTHERWRITER@MAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJeE8bl7BqLP1QN5cd+ZykFQqN7q2HFNkGOZNuERcCwgMzP+UWbqSo+qljfXAEEVOw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "152dc4cc-55c0-4577-a019-f7afab040578",
                            TwoFactorEnabled = false,
                            UserName = "otherWriter@mail.com"
                        },
                        new
                        {
                            Id = "e55487c1-37f7-4cad-88f1-13c089ceb2c6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "96b2ad96-8389-4f88-9745-9dcc41751ed6",
                            Email = "subscriber@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SUBSCRIBER@MAIL.COM",
                            NormalizedUserName = "SUBSCRIBER@MAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEE8OJFw9SzOFqFubelqjUKNwjiegFEVgniPnQpoQNLGU6lpTQqGiYb8SROqYVPbT6g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0496a4ad-1e9c-4a7a-8c2b-67059b7bdc42",
                            TwoFactorEnabled = false,
                            UserName = "subscriber@mail.com"
                        },
                        new
                        {
                            Id = "69e928e3-4b49-42e2-a6bb-3724400398ab",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "af6b8aca-87a5-4f29-a042-2f8e9614c704",
                            Email = "otherSubscriber@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "OTHERSUBSCRIBER@MAIL.COM",
                            NormalizedUserName = "OTHERSUBSCRIBER@MAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIFdLrdBt+pZle2Y0505RUyn0LTbaiu+tqpUnEWBIWz4AirV/64FtPD6cywI+7u47g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f19d8b6b-3cec-4fb6-83f9-f8e2e7d946b1",
                            TwoFactorEnabled = false,
                            UserName = "otherSubscriber@mail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("newsApi.Enteties.NewsUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("newsApi.Enteties.NewsUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("newsApi.Enteties.NewsUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("newsApi.Enteties.NewsUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("newsApi.Enteties.Article", b =>
                {
                    b.HasOne("newsApi.Enteties.NewsUser", "Autor")
                        .WithMany("Articles")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Autor");
                });

            modelBuilder.Entity("newsApi.Enteties.Comment", b =>
                {
                    b.HasOne("newsApi.Enteties.Article", "Article")
                        .WithMany("Comments")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("newsApi.Enteties.NewsUser", "Author")
                        .WithMany("Comments")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("newsApi.Enteties.Article", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("newsApi.Enteties.NewsUser", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
